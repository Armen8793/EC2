name: Terraform Automation

on:
  push:
    branches:
      - main  
  pull_request:
    branches:
      - main  
env:
  AWS_REGION: us-west-2
  ECR_REPO: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com
  SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

  
jobs:
  terraform:
    runs-on: ubuntu-latest  

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2 
        with:
          terraform_version: 1.5.0  

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialise project and view terraform plan
        run: |
          terraform init  

      - name: Terraform Plan
        run: |
          terraform plan 
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Apply Terraform Configuration
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          terraform apply -auto-approve 
      #   continue-on-error: true

      - name: Get EC2 Public IP
        id: get_ip
        run: |
          echo "Raw Terraform output:"
          terraform output ec2_public_ip  # Проверяем, что возвращает Terraform
          EC2_PUBLIC_IP=$(terraform output ec2_public_ip | awk -F'"' '{print $2}')
          echo "Extracted IP: $EC2_PUBLIC_IP"
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV


      - name: Set up SSH key from GitHub secrets
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key.pem
          chmod 600 /tmp/ssh_key.pem
          eval $(ssh-agent -s)
          ssh-add /tmp/ssh_key.pem
          export ANSIBLE_SSH_ARGS="-o StrictHostKeyChecking=no -i /tmp/ssh_key.pem"
          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook -i inventory docker.yaml

      - name: Cleanup
        run: rm -f /tmp/ssh_key.pem

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

          
      - name: Build and Push Docker Images
        run: |
          IMAGES=("server" "client" "nginx")
          REPOS=("bdg-repoarmentest-1" "bdg-repoarmentest-2" "bdg-repoarmentest-3")
    
          for i in ${!IMAGES[@]}; do
            IMAGE=${IMAGES[$i]}
            REPO=${REPOS[$i]}
      
            docker build --no-cache -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO:latest -f ./${IMAGE}/Dockerfile.dev ./${IMAGE}
            docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO:latest
          done

      - name: Deploy to EC2
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key.pem
          chmod 600 /tmp/ssh_key.pem

          ssh -o StrictHostKeyChecking=no -i /tmp/private_key.pem ubuntu@$EC2_PUBLIC_IP <<EOF 
            set -e
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
            cd ~/bookstore || mkdir ~/bookstore && cd ~/bookstore
            echo "ECR_SERVER_IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/bdg-repoarmentest-1:latest" > .env
            echo "ECR_CLIENT_IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/bdg-repoarmentest-2:latest" >> .env
            echo "ECR_NGINX_IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/bdg-repoarmentest-3:latest" >> .env
            docker compose pull
            docker compose up -d --force-recreate
          EOF

     
      - name: Scan Server Image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: bdg-repoarmentest-1:latest
          format: 'table'
          ignore-unfixed: true
        continue-on-error: false 

      - name: Scan Client Image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: bdg-repoarmentest-2:latest
          format: 'table'
          ignore-unfixed: true
        continue-on-error: false 

      - name: Scan Nginx Image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: bdg-repoarmentest-3:latest
          format: 'table'
          ignore-unfixed: true
        continue-on-error: false
